name: EC2/RDS AWS Deploy Workflow

on:
  push:
    branches: 
      - main
    paths:
      - 'src/*'
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ vars.IAM_ROLE }}
        role-session-name: GithubActionsDeploy
    - name: Start RDS Instance
      run: |
        aws rds start-db-instance --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }}
        sleep 240s
    - name: Check RDS instance status
      run: |
        INSTANCE_STATUS=$(aws rds describe-db-instances --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }} --query 'DBInstances[0].DBInstanceStatus' --output text)

        if [ "$INSTANCE_STATUS" != "available" ]; then
          echo "RDS instance is not open. Stopping the job..."
          exit 1
        fi
    - name: Start EC2 Instance
      run: |
        aws ec2 start-instances --instance-ids ${{ vars.EC2.INSTACE_ID}}
        sleep 60s
    - name: Check EC2 Instance status
      run: |
        INSTANCE_STATUS=$(aws ec2 describe-instances --instance-ids ${{ vars.EC2_INSTANCE_ID}} --query 'Reservations[0].Instances[0].State.Name' --output text)

        if [ "$INSTANCE_STATUS" != "running" ]; then
          echo "EC2 instance is not open. Stopping the job..."
          exit 1
        fi
    - name: Connect, Build and Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ vars.REPO_PATH }} &&
          git checkout main &&
          git fetch --all && 
          git reset --hard HEAD &&
          git pull origin main &&
          git clean -f &&
          npm install @types/express &&
          npm install @types/node &&
          npm install &&
          cd ${{ vars.BACKEND_PATH }} &&
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env &&
          echo 'DB_HOST=${{ vars.DB_HOST }}' >> .env &&
          echo 'DB_PORT=${{ vars.DB_PORT }}' >> .env &&
          echo 'DB_USERNAME={{ vars.DB_USERNAME }}' >> .env &&
          echo 'DB_PASSWORD={{ vars.DB_PASSWORD }}' >> .env &&
          echo 'DB_SCHEMA={{ vars.DB_SCHEMA }}' >> .env &&
          cat '${{ secrets.SSH_PVT_KEY }}' >> pvt_key.pem &&
          ssh -i "pv_key.pem" -f -N -L 3310:${{ secrets.RDS_ENDPOINT }}:3306 ec2-user@54.174.239.75 &&
          sleep 15 &&
          npm start &&
          cd ${{ vars.FRONTEND_PATH }} &&
          # Start frontent
          sleep 1
    - name: Connect, Build and Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ vars.REPO_PATH }} &&
          git checkout main &&
          git fetch --all && 
          git reset --hard HEAD &&
          git pull origin main &&
          git clean -f &&
          npm install @types/express &&
          npm install @types/node &&
          npm install &&
          cd ${{ vars.BACKEND_PATH }} &&
          echo 'SECRET_KEY=${{ vars.SECRET_KEY }}' >> .env &&
          echo 'DB_HOST=${{ vars.DB_HOST }}' >> .env &&
          echo 'DB_PORT=${{ vars.DB_PORT }}' >> .env &&
          echo 'DB_USERNAME={{ vars.DB_USERNAME }}' >> .env &&
          echo 'DB_PASSWORD={{ vars.DB_PASSWORD }}' >> .env &&
          echo 'DB_SCHEMA={{ vars.DB_SCHEMA }}' >> .env &&
          cat '${{ secrets.SSH_PRIVATE_KEY }}' >> pvt_key.pem &&
          ssh -i "pv_key.pem" -f -N -L 3310:${{ secrets.RDS_ENDPOINT }}:3306 ec2-user@54.174.239.75 &&
          sleep 15 &&
          npm start &&
          cd ${{ vars.FRONTEND_PATH }} &&
          # Adicionar start frontend
    - name: Running State
      run: sleep 4h
    - name: Close EC2 Instance
      run: aws ec2 stop-instances --instance-ids ${{ vars.EC2_INSTANCE_ID }}
    - name: Close RDS Instance
      run: aws rds stop-db-instance --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }}
